<% include header %>
<script src="../../javascripts/editor/js/lib/require.js" ></script>

<style type="text/css">
  .styled-background {
    background-color: yellow;
  }
</style>

<div class="ui grid">
  <div class="ui container">
    <!-- <iframe src="./turtleEditorLink/" frameborder="0" scrolling="no" style="height:800px; position: absolute; width:100% ; right: 0px; left: 0px"></iframe> -->
    <section id="message-queue"></section>
    <div class="container">

      <div class="row" style="font-size:12px;">
        <div class="col-md-3">
          <div class="form-group" style="padding-top:35px;">
            <label for="input-username">Username (for login)</label>
            <input type="text" class="form-control popup-show" id="input-username" placeholder="Your GitHub username">
            <div class="ui special popup">
              <div class="header">You need to provide your username and password only if you want to save the files after editing, or if the repository is private.</div>
            </div>

          </div>
          <div class="form-group">
            <label for="input-password">Password or Token</label>
            <input type="password" class="form-control popup-show" id="input-password" placeholder="Password or Token">
            <div class="ui special popup">
              <div class="header">To authenticate with a GitHub personal access token, leave the fields Username empty and paste the token into the field Password or Token.</div>
            </div>
          </div>
          <div class="form-group">
            <button type="button" id="button-load" class="ui big button popup-show" style="width:100%">
              <i class="upload icon"></i>
  Load Files</button>
            <div class="ui special popup">
              <div class="header">For a quick tour leave the fields Username and Password blank and just click the Load Files button.</div>
            </div>
          </div>
          <div class="form-group">
            <label for="input-file">Filename</label>
            <select class="form-control popup-show" id="input-file"></select>
            <div class="ui special popup">
              <div class="header">Select individual files for viewing or editing.</div>
            </div>
          </div>
          <div class="form-group">
            <div class="wrapper">
              <div class="ui form">
                <label for="input-file">Search</label>
                <div class="inline field">
                  <input type='text' id='search-input' placeholder='search in the file...' class="form-control" >
                  <span id='search-count' class='hidden-element search-count'><span id='search-index'></span><span id='search-total'></span></span>

                </div>

                <button type="button" id="next-btn" class="search-btn hidden-element">
                  <i class="angle double right icon"></i>
                </button>
                <button type="button" id="previous-btn" class="search-btn hidden-element">
                  <i class="angle double  left icon"></i>
                </button>
              </div>
            </div>
          </div>

          <label  for="syntax-play" >Syntax checking</label>

          <div class="form-group">
            <div class="ui form">
              <div class="inline field">
                <div class="ui  toggle checkbox popup-show">
                  <label for="enableDisbleSyntaxChecking">Deactivate/Activate</label>
                  <input type="checkbox" name="mySliders" id="enableDisbleSyntaxChecking" checked>

            </div>

                <div class="ui special popup">
                  <div class="header">Click to activate/deactivate syntax checking.</div>
                </div>
              </div>
            </div>
          </div>
          <div class="form-group">
            <label for="input-message">Commit message</label>
            <input type="text" class="form-control" id="input-message" placeholder="Turtle file edited, just as an example."/>
            </div>
          <div class="form-group">
            <button class="ui big vk button"  id="button-save" style="width:100%">
    <i class="save icon"></i>
    Commit changes
  </button>
          </div>

          <div id="syntax-check" style="padding-bottom:12px">
            <p id="syntax-check-failed" style="display: none">
              <img src="../../javascripts/editor/img/red_orb.png" alt="A red orb." class="status-icon">
              <span class="status">Syntax check failed.</span>
            </p>
            <p id="syntax-check-working" style="display: none">
              <img src="../../javascripts/editor/img/yellow_orb.png" alt="A yellow orb." class="status-icon">
              <span class="status">Syntax checker working.</span>
            </p>
            <p id="syntax-check-pending">
              <img src="../../javascripts/editor/img/yellow_orb.png" alt="A yellow orb." class="status-icon">
              <span class="status">Syntax check pending...</span>
            </p>
            <p id="syntax-check-off" style="display: none">
              <img src="../../javascripts/editor/img/yellow_orb.png" alt="A yellow orb." class="status-icon">
              <span class="status">Syntax checking is disabled. Click to enable.</span>
            </p>
            <p id="syntax-check-passed" style="display: none">
              <img src="../../javascripts/editor/img/green_orb.png" alt="A green orb." class="status-icon">
              <span class="status">Syntax check passed.</span>
            </p>
          </div>
          <div class="form-group">
            <div class="ui big button popup-show" id="helpButton" style="padding-top: 6px; width:100%">
              <i class="hand paper icon"></i> Help
            </div>
            <div class="ui special popup">
              <div class="header">Click Me! to get some details about the editor usage.</div>
            </div>
          </div>

          <div class="ui fullscreen modal">
            <i class="close icon"></i>
            <div class="header">
              Help for using the editor
            </div>
            <div class="content" style="font-size:16px">
              <ul>
                <li>For a quick tour leave the fields <em>Username</em> and <em>Password</em> blank and just click the <em>Load Files</em> button.
                <li>Select individual files for viewing/editing in the field <em>Filename</em>.
                <li>To use the autocomplete function, type <em>Ctrl+Space</em>.
                <li>Click the colored sphere to temporarily disable syntax checking.
                <li>You need to provide your username and password only if you want to save the files after editing, or if the repository is private.
                <li>To authenticate with a GitHub personal access token, leave the fields <em>Username</em> empty and paste the token into the field <em>Password or Token</em>.
              </ul>
            </div>
          </div>
        </div>

        <div class="col-md-9">
          <div class="form-group">
            <br><br>
            <label for="input-contents">Content editor: <span class="current-filename"></span></label>
            <textarea id="input-contents" placeholder="File content will appear here" rows="40" wrap="hard"></textarea>
          </div>

          <div class="ui small modal" id="modalNewCommit" style="font-size:16px">
            <i class="close icon"></i>
            <div class="header">
              Warning! New commit
            </div>
            <div class="content">
              <p>
                There is a new commit on your working repository.
              </p>
              <div class="description">
                Save your data or reload without saving
              </div>
            </div>
            <div class="actions">
              <div class="ui big button">Reload without saving</div>
              <div class="ui vk big button">Save my data</div>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>
</div>

<% include footer %>

<script>
  // var require = {
  //   baseUrl: '../javascripts/editor/js',
  //   paths: {
  //     mode: '../mode',
  //     N3: 'lib/n3-browser-slk',
  //     jquery: 'lib/jquery-2.1.3.min',
  //     github: 'lib/github',
  //     underscore: 'lib/underscore-min',
  //     semanticUI: '../../semanticUI',
  //   },
  //   shim: { // see http://requirejs.org/docs/api.html#config-shim
  //     'N3': {
  //       exports: 'N3'
  //     }
  //   }
  // };

//   require(['foo'], function(foo) {

// });


  // see https://www.npmjs.com/package/github-client
  // and http://getbootstrap.com/css/ (styles for prettiness)
  // and http://codemirror.net/ (text editor with syntax highlighting)
  // and https://github.com/RubenVerborgh/N3.js (Turtle parser)

  //
  // define(['jquery', 'github', 'N3', 'lib/codemirror',
  //   'addon/hint/show-hint', 'mode/turtle/turtle', 'hint/turtle-hint',
  //   'logger'
  // ],
  //
  //   function($, Github, N3, CodeMirror, ShowHint, ModeTurtle, HintTurtle,
  //     logger) {

  // HTML elements-----------------------------------------------------------
  // see https://www.npmjs.com/package/github-client
  // and http://getbootstrap.com/css/ (styles for prettiness)
  // and http://codemirror.net/ (text editor with syntax highlighting)
  // and https://github.com/RubenVerborgh/N3.js (Turtle parser)

  //
  // define(['jquery', 'github', 'N3', 'lib/codemirror',
  //   'addon/hint/show-hint', 'mode/turtle/turtle', 'hint/turtle-hint',
  //   'logger', 'addon/search/search', 'addon/search/searchcursor',
  //   'addon/selection/mark-selection', 'semanticUI/semantic'
  // ],
  //
  //   function($, Github, N3, CodeMirror, ShowHint, ModeTurtle, HintTurtle,
  //     logger, Search, SearchCursor, MarkSelection, SemanticUI) {

    require(['../../javascripts/editor/js/config'], function() {
    // Configuration loaded now, safe to do other require calls
    // that depend on that config.

    define(['jquery', 'github', 'N3', 'lib/codemirror',
    'addon/hint/show-hint', 'mode/turtle/turtle', 'hint/turtle-hint',
    'logger', 'addon/search/search', 'addon/search/searchcursor',
    'addon/selection/mark-selection', 'semanticUI/semantic'
  ],
    function($, Github, N3, CodeMirror, ShowHint, ModeTurtle, HintTurtle,
      logger, Search, SearchCursor, MarkSelection, SemanticUI) {
      // HTML elements ------------------------------------------------------------

      var menu = $("#menu");

      var inputElements = {
        username: $("#input-username"),
        password: $("#input-password"),
        file: $("#input-file"),
        contents: $("#input-contents"),
        message: $("#input-message"),
        load: $("#button-load"),
        save: $("#button-save"),
        fileDisp: $(".current-filename"),
        vowlLink: $("#webvowl-link"),
        ghLink: $("#github-link"),
        sparqlURL: $("#sparql-link"),
        search: $("#search-input")
      };

      var syntaxCheckElements = {
        checker: $("#syntax-check"),
        working: $("#syntax-check-working"),
        pending: $("#syntax-check-pending"),
        passed: $("#syntax-check-passed"),
        failed: $("#syntax-check-failed"),
        off: $("#syntax-check-off")
      };

      // Editor state -------------------------------------------------------------

      var isBinary = false;

      var gh,
        repo,
        branch,
        user;
      var currentFile;
      var currentRepoOwner = "",
        currentRepoName = "",
        currentRepoBranch = "",
        currentCommit = "";
      initialCommit = "";
      // get some repo. information four userConfigurations.json file to be used in this editor
        (function setRepoInfo() {
          $.ajax({
            type: "GET",
            url: document.URL.split("editor")[0] + "getRepoInfo",
            headers: {
              Accept: 'application/json;charset=UTF-8'
            },
            success: function(data, textStatus, jqXHR) {
              if (data) {
                currentRepoOwner = data[0];
                currentRepoName = data[1];
                currentRepoBranch = data[2];
                console.log(data);
              }
            },
          });
        })()

      var state = {
        syntaxCheck: "off",
        fileIsLoaded: false,
        gh: undefined,
        repo: undefined,
        branch: undefined,
        user: undefined,
        currentFile: undefined
      };

      var activationState = true;

      var editor = CodeMirror.fromTextArea(inputElements.contents[0], {
        mode: "turtle",
        autofocus: false,
        lineNumbers: true,
        gutters: ["CodeMirror-linenumbers", "breakpoints"],
        extraKeys: {
          "Ctrl-Space": "autocomplete"
        }
      });

      // Initialization -----------------------------------------------------------
      editor.custom = {}; // to pass list of prefixes and names
      editor.custom.dynamicNames = {};
      editor.custom.prefixed = {};
      var dynamicNames = {};

      CodeMirror.commands.autocomplete = function(cm) {
        cm.showHint(cm, CodeMirror.hint.turtle, {
          test: "test"
        });
      };

      //Further information to help User-------------------------------------------

      $('.popup-show')
        .popup({
          inline: true,
          position: 'bottom left'
        });

      $('.popup-click-show')
        .popup({
          popup: $('.custom.popup'),
          on: 'click',
          inline: true,
          position: 'bottom left'
        });
      // @ahmed
      // when help button is clicked
      $('#helpModal').modal('attach events', '#helpButton',
        'show');

      // Reenable input element (necessary for Firefox)
      for (var key in inputElements) {
        inputElements[key].prop("disabled", false);
      }

      // Github Interaction -------------------------------------------------------
      var loadFromGitHub = function() {
        var username = inputElements.username.val().trim();
        var ownername = currentRepoOwner;
        var password = inputElements.password.val().trim();
        var reponame = currentRepoName;
        var branchname = currentRepoBranch;



        $('#search-input').attr('enabled', true);
        enableSearchButton();

        if (state.fileIsLoaded) {
          //logger.info("File already loaded.");
        } else {
          if (username != "") {
            gh = new Github({
              username: username,
              password: password
            });
          } else {
            gh = new Github({
              token: password
            });
          }

          user = gh.getUser();
          //logger.debug("user", user);

          if (!user) {
            //logger.warning("Not logged in.", username);
          }

          repo = gh.getRepo(ownername, reponame);
          branch = repo.getBranch(branchname);
          console.log(repo);
          console.log(branch);
          // TODO:
          // the next call is redundant: branch already contains list of files,
          // and this should not be "master" but the selected branch:
          var tree = repo.git.getTree("master", null)
            .done(function(tree) {
              for (var i = 0; i < tree.length; i++) {
                if (tree[i].path.endsWith(".ttl")) {
                  var opt = tree[i].path;
                  var el = document.createElement("option");
                  el.textContent = opt;
                  el.value = opt;
                  inputElements.file.append(el);
                }
              }
              readFile();
            });
        //@ahmed
        // stop disabling username and  password
        //inputElements.username.prop("disabled", true);
        //inputElements.password.prop("disabled", true);
        // @ahmed
        //  disableLoadButton();
        //changeSyntaxCheckState("pending");
        }


        //Show new commit on github------------------------------------------------
        $.ajax({ //Initializing commit with last commit of repo by loading file
          type: 'GET',
          url: "https://api.github.com/repos/" + currentRepoOwner + "/" +
            currentRepoName +
            "/commits?Accept=application/vnd.github.v3+json",

          data: {
            get_param: 'value'
          },
          success: function(data) {
            initialCommit = currentCommit = data[0]['sha']; //Get commit's sha
            console.log(data[0]['sha']);
          }
        });

      };
      //------------------------------------------------------------------------



      var readFile = function() {
        var filename = inputElements.file.val()
        // when change the file hide these elements and clear searched text
        $("#search-count").hide();
        $("#next-btn").hide();
        $("#previous-btn").hide();
        $("#search-input").val("");

        branch.read(filename, isBinary)
          .done(function(contents) {
            editor.setValue(contents.content);
            state.fileIsLoaded = true;
            displayCurrentFilename(filename);

            if (user) {
              enableSaveButton();
            }

            localStorage.setItem("someVarKey", editor.getValue());
          })
          .fail(function(err) {
            //logger.error("Read from GitHub failed", err);
          });

      //changeSyntaxCheckState("pending");
      };

      var storeToGitHub = function() {
        //New commit on repository is checked
        if (initialCommit != currentCommit) { //Check if currentCommit is not the same as initial commit, will show the modal message.
          $('#modalNewCommit').modal({
            centered: false,
            blurring: true
          }).modal('show');
        }

        document.getElementById("enableDisbleSyntaxChecking").checked = true;
        $('.ui.toggle').checkbox();
        console.log("Changing"); //make alarm in the case of new commit has come
        changeSyntaxCheckState("pending");

        var filename = inputElements.file.val();
        var content = editor.getValue().trim();
        var message = inputElements.message.val().trim();
        if (message) {
          if (state.fileIsLoaded) {
            branch.write(filename, content, message, isBinary)
              .done(function() {
                //logger.success("Saving to GitHub completed.")
              })
              .fail(function(err) {
                //logger.error("Saving to GitHub failed.", err);
              });
          } else {
          //  logger.info("Nothing to save.");
          }
        } else {
          alert(
            "Please, fill-in the commit message box, it cannot be empty..."
          );
        }
      };

      // Display current filename -------------------------------------------------
      var displayCurrentFilename = function(filename) {
        var baseUri = "http://vowl.visualdataweb.org/webvowl/index.html#iri=https://raw.githubusercontent.com/";
        var ownername = currentRepoOwner;
        var reponame = currentRepoName;
        var branchname = currentRepoBranch;
        var specific = ownername + "/" + reponame + "/" + branchname;
        inputElements.fileDisp.html(filename)
        inputElements.vowlLink.removeAttr("href");
        inputElements.vowlLink.attr("href", baseUri + specific + "/" +
          filename);

        // external links //////////////////////////
        var githubURI = "https://github.com";
        inputElements.ghLink.attr("href", githubURI + "/" + ownername + "/" +
          reponame + "/");
        var sparqlProcessorURI = "../SparqlProcessor/sparql-processor.html";

        inputElements.sparqlURL.attr("href", sparqlProcessorURI + "#" +
          ownername + "/" + reponame + "/" + filename);
        $("#menu").show();
      };

      // "http://vowl.visualdataweb.org/webvowl/index.html#iri=https://raw.githubusercontent.com/mobivoc/mobivoc/master/"

      editor.on("change", function() {
        setInterval(function() { //In every 60 seconds get last commit of repo and compare it with current commit of user
          $.ajax({
            type: 'GET',
            url: "https://api.github.com/repos/" + currentRepoOwner +
              "/" +
              currentRepoName +
              "/commits?Accept=application/vnd.github.v3+json",
            data: {
              get_param: 'value'
            },

            //Change the success function to logger
            success: function(data) {

              //Add it in commit button
              if (data[0]['sha'] != currentCommit) {
                //logger.warning(
                //  "New commit happened on your working repository"
                //);
                currentCommit = data[0]['sha'];
              }
            }
          });
        }, 300000);


        if (editor.getValue() != localStorage.getItem("someVarKey") &&
          activationState) {
          document.getElementById("enableDisbleSyntaxChecking").checked = true;
          $('.ui.toggle').checkbox();
          console.log("Changing"); //make alarm in the case of new commit has come
          changeSyntaxCheckState("pending");
        }
      });

      // Syntax Check -------------------------------------------------------------
      // Search in textArea--------------------------------------------------------
      var marked = [],
        markedPositions = [],
        lastPos = null,
        lastQuery = null;

      function unmark() {
        for (var i = 0; i < markedPositions.length; ++i) markedPositions[i].clear();
        markedPositions.length = 0; //editor clear selected cursor positions
        for (var i = 0; i < marked.length; ++i) marked[i].clear();
        marked.length = 0; //editor clear searched texts
      }

      function search(select) {
        var currentIndex = 0;

        function setPosition() {
          editor.setSelection(marked[currentIndex].find()['from'],
            marked[currentIndex].find()['to']);
          editor.setCursor(marked[currentIndex].find()['from']);

          if (markedPositions.length != 0) {
            markedPositions[0].clear();
            markedPositions.pop();
          }

          markedPositions.push(editor.markText(marked[currentIndex].find()[
            'from'],
              marked[
                currentIndex].find()['to'], {
                css: "background-color: orange"
              }));
          var actualIndexValue = currentIndex + 1;
          document.getElementById('search-index').innerHTML = actualIndexValue.toString() +
            '/';
        }

        function select() { //This function change the position of cursor by click on buttons.
          if (marked.length != 0) {

            $('#previous-btn').on("click", function() {
              if (currentIndex == 0) {
                currentIndex = marked.length - 1;
              } else {
                currentIndex--;
              }

              setPosition();
            });

            $('#next-btn').on("click", function() {
              if (currentIndex == marked.length - 1) {
                currentIndex = 0;
              } else {
                currentIndex++;
              }

              setPosition();
            });
          }
        }

        unmark();
        var text = document.getElementById("search-input").value;
        if (this.value != '') {
          for (var cursor = editor.getSearchCursor(text); cursor.findNext();) {
            marked.push(editor.markText(cursor.from(), cursor.to(), {
              className: "searched-key",
              clearOnEnter: true
            }));
          //  markedPositions.push(marked[marked.length-1]);
          }
          document.getElementById('search-index').innerHTML = '0/'; //change to 1?
          document.getElementById('search-total').innerHTML = marked.length;
          document.getElementById('search-count').style.display = 'inline-block';
          document.getElementById('next-btn').style.display = 'inline-block';
          document.getElementById('previous-btn').style.display = 'inline-block';
          select();
        } else {
          unmark();
          $("#search-count").hide();
          $("#next-btn").hide();
          $("#previous-btn").hide();
        }
      }

      $('#search-input').on("input", search);

      //Check the new commit and popup it--------------------------------------------------
      //-----------------------------------------------------------------------------

      var playChecking = function() {
        console.log("playChecking");
        $('.ui.toggle').checkbox();
        activationState = true;
        if (state.syntaxCheck === "off") {
          console.log("-> pending");
          changeSyntaxCheckState("pending", undefined, true);
        }
      };

      var pauseChecking = function() {
        activationState = false;
        if (state.syntaxCheck !== "off") {
          changeSyntaxCheckState("off");
          console.log("-> off");
        }
      };
      // enable checkbox function


      $('.ui.toggle').click(function() {
        if (!$('#enableDisbleSyntaxChecking').is(":checked")) {
          playChecking();
        } else {

          pauseChecking();
        }
      });

      var makeMarker = function(errorMessage) {
        var marker = document.createElement("div");
        marker.style.color = "#822";
        marker.innerHTML = "●";
        marker.title = errorMessage;
        return marker;
      };

      var splitIntoNamespaceAndName = function(s) {
        var lastHash = s.lastIndexOf("#");
        var lastSlash = s.lastIndexOf("/");
        var pos = Math.max(lastHash, lastSlash) + 1;

        return {
          namespace: s.substring(0, pos),
          name: s.substring(pos)
        };
      };

      var parserHandler = function(error, triple, prefixes) {
        if (error) {
          /* extract line Number, only consider the end of the string after "line" */
          var errorSubString = error.message.substr(error.message.indexOf(
              "line") + 4);
          var errorLineNumber = parseInt(errorSubString) - 1;
          //TODO: check what is going here
          // /* add background color, gutter + tooltip */
          // var lastPos = null,
          //   lastQuery = null,
          //   marked = [];
          // var text = this.value;
          // for (var cursor = editor.getSearchCursor(text); cursor.findNext();)
          //   marked.push(editor.markText(cursor.from(), cursor.to(), {
          //     className: "styled-background"
          //   }));
          // if (lastQuery != text)
          //   lastPos = null;
          // var cursor = editor.getSearchCursor(text, lastPos || editor.getCursor());
          // if (!cursor.findNext()) {
          //   cursor = editor.getSearchCursor(text);
          // }
          // editor.setSelection(cursor.from(), cursor.to());
          // lastQuery = text;
          // lastPos = cursor.to();
          editor.getDoc().addLineClass(errorLineNumber, "wrap",
            "ErrorLine-background");
          editor.setGutterMarker(errorLineNumber, "breakpoints", makeMarker(
            error.message));

          changeSyntaxCheckState("failed", error.message);
        } else if (triple) {
          var subjectSplit = splitIntoNamespaceAndName(triple.subject);
          var predicateSplit = splitIntoNamespaceAndName(triple.predicate);
          var objectSplit = splitIntoNamespaceAndName(triple.object);

          dynamicNames[subjectSplit.namespace] = dynamicNames[subjectSplit.namespace] || {};
          dynamicNames[subjectSplit.namespace][subjectSplit.name] = true;

          dynamicNames[predicateSplit.namespace] = dynamicNames[
            predicateSplit.namespace] || {};
          dynamicNames[predicateSplit.namespace][predicateSplit.name] = true;

          dynamicNames[objectSplit.namespace] = dynamicNames[objectSplit.namespace] || {};
          dynamicNames[objectSplit.namespace][objectSplit.name] = true;
        } else if (!triple) {
          changeSyntaxCheckState("passed");
          editor.custom.dynamicNames = dynamicNames;
        }

        if (prefixes) {
          editor.custom.prefixes = prefixes;
        }
      };

      var changeSyntaxCheckState = function(newState, error, force = false) {
        if (newState !== state.syntaxCheck && (state.syntaxCheck !== "off" ||
          force === true)) {
          console.log("changeSyntaxCheckState", newState, error, force);
          syntaxCheckElements[state.syntaxCheck].hide();
          state.syntaxCheck = newState;

          if (newState === "failed") {
            var status = syntaxCheckElements[newState].find(".status")
            if (error) {
              if (error.startsWith("Syntax error:")) {
                status.html(" " + error);
              } else {
                status.html(" Syntax error: " + error);
              }
            } else {
              status.html(" Syntax check failed.")
            }
          }
          syntaxCheckElements[newState].show();
        }
      };

      var checkSyntax = function() {
        /* remove all previous errors  */
        /* TODO: IMPROVE EFFICIENCY */
        editor.eachLine(function(line) {
          editor.getDoc().removeLineClass(line, "wrap");
          editor.clearGutter("breakpoints");
        });

        var parser,
          content;
        if (state.fileIsLoaded) {
          content = editor.getValue();
          parser = N3.Parser();
          parser.parse(content, parserHandler);
        }
      };

      var checkForUpdates = function() {
        if (state.syntaxCheck === "pending" && state.fileIsLoaded &&
          activationState) {
          changeSyntaxCheckState("working");
          checkSyntax();
        }
      };

      // Event listeners ----------------------------------------------------------
      inputElements.load.on("click", loadFromGitHub);
      inputElements.save.on("click", storeToGitHub);
      inputElements.file.on("change", readFile);

      // Repeated actions ---------------------------------------------------------
      window.setInterval(checkForUpdates, 1000);

      // Utility ------------------------------------------------------------------
      var disableLoadButton = function() {
        inputElements.load.removeClass("btn-primary");
        inputElements.load.addClass("btn-default");
        inputElements.load.prop("disabled", true);
      };

      var enableSaveButton = function() {
        inputElements.save.removeClass("btn-default");
        inputElements.save.addClass("btn-primary");
        inputElements.save.prop("disabled", false);
      };

      var disableSaveButton = function() {
        inputElements.save.addClass("btn-default");
        inputElements.save.removeClass("btn-primary");
        inputElements.save.prop("disabled", true);
      };

      var enableSearchButton = function() {
        inputElements.search.prop("disabled", false);
      };

      var disableSearchButton = function() {
        inputElements.search.prop("disabled", true);
      };

      // do it
      disableSaveButton();
      disableSearchButton();
      if (!String.prototype.endsWith) {
        String.prototype.endsWith = function(searchString, position) {
          var subjectString = this.toString();
          if (position === undefined || position > subjectString.length) {
            position = subjectString.length;
          }
          position -= searchString.length;
          var lastIndex = subjectString.indexOf(searchString, position);
          return lastIndex !== -1 && lastIndex === position;
        };
      }

      if (!String.prototype.startsWith) {
        String.prototype.startsWith = function(searchString, position) {
          position = position || 0;
          return this.indexOf(searchString, position) === position;
        };
      }
  });
});

</script>
